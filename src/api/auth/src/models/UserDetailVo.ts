// tslint:disable
/**
 * 前端服务
 * 服务API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { momentInit as moment } from 'utils/DateFormat';
import { FormStore, IFormField, FormType } from 'common/FormStore';
import { Field } from 'common/Field';
import { isRequired } from "utils/Validate";
import * as _ from 'lodash';
import {
    PermissionVo,
    PermissionVoFromJSON,
    PermissionVoToJSON,
} from './';

/**
 * 
 * @export
 * @interface UserDetailVo
 */
export interface UserDetailVo {
    /**
     * 用户Id
     * @type {number}
     * @memberof UserDetailVo
     */
    id?: number;
    /**
     * 上次登录时间
     * @type {Date}
     * @memberof UserDetailVo
     */
    lastLoginTime?: Date;
    /**
     * 手机号
     * @type {string}
     * @memberof UserDetailVo
     */
    mobile?: string;
    /**
     * 用户菜单权限
     * @type {Array<PermissionVo>}
     * @memberof UserDetailVo
     */
    permissions?: Array<PermissionVo>;
    /**
     * 真实姓名
     * @type {string}
     * @memberof UserDetailVo
     */
    realName?: string;
    /**
     * 用户名
     * @type {string}
     * @memberof UserDetailVo
     */
    username?: string;
    /**
     * 所属公司
     * @type {string}
     * @memberof UserDetailVo
     */
    corpName?: string;
    /**
     * 用户等级
     * @type {string}
     * @memberof UserDetailVo
     */
    level?: string;
    /**
     * vip过期时间
     * @type {Date}
     * @memberof UserDetailVo
     */
    vipExpireTime?: Date;
}

export function UserDetailVoFromJSON(json: any): UserDetailVo {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lastLoginTime': !exists(json, 'lastLoginTime') ? undefined : moment(json['lastLoginTime']).toDate(),
        'mobile': !exists(json, 'mobile') ? undefined : json['mobile'],
        'permissions': !exists(json, 'permissions') ? undefined : (json['permissions'] as Array<any>).map(PermissionVoFromJSON),
        'realName': !exists(json, 'realName') ? undefined : json['realName'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'corpName': !exists(json, 'corpName') ? undefined : json['corpName'],
        'level': !exists(json, 'level') ? undefined : json['level'],
        'vipExpireTime': !exists(json, 'vipExpireTime') ? undefined : moment(json['vipExpireTime']).toDate(),
    };
}

export function UserDetailVoToJSON(value?: UserDetailVo): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'lastLoginTime': value.lastLoginTime === undefined ? undefined : value.lastLoginTime.toISOString(),
        'mobile': value.mobile,
        'permissions': value.permissions === undefined ? undefined : (value.permissions as Array<any>).map(PermissionVoToJSON),
        'realName': value.realName,
        'username': value.username,
        'corpName': value.corpName,
        'level': value.level,
        'vipExpireTime': value.vipExpireTime === undefined ? undefined : value.vipExpireTime.toISOString(),
    };
}



export type UserDetailVoFormKeys = keyof UserDetailVo;
export type UserDetailVoNewType = {[P in UserDetailVoFormKeys]: UserDetailVo[P]};
export type UserDetailVoFormType = FormType<UserDetailVoNewType>;

export function UserDetailVoFormDefault(): IFormField<UserDetailVo> {
    return {
        id: { value: void 0 },
        lastLoginTime: { value: void 0 },
        mobile: { value: void 0 },
        permissions: { value: void 0 },
        realName: { value: void 0 },
        username: { value: void 0 },
        corpName: { value: void 0 },
        level: { value: void 0 },
        vipExpireTime: { value: void 0 },
    } as any;
}

export function createUserDetailVoFormStore<T>(field?: IFormField<T>): FormType<UserDetailVoNewType & T> {
    const fields: IFormField<T & UserDetailVo> = _.merge<any , any>(UserDetailVoFormDefault(), field);
    return new FormStore(
        _.mapValues<IFormField<T & UserDetailVo>, Field<any>>(fields, (item: any) => {

          if (_.has(item, "required") && item.required) {
            return new Field(item).validators(...(item.rules || [isRequired]));
          }
          if (typeof item!!.rules !== "undefined") {
            return new Field(item).validators(...item.rules);
          }
          return new Field(item);
        })
    );
}

