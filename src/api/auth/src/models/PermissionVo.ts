// tslint:disable
/**
 * 前端服务
 * 服务API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { momentInit as moment } from 'utils/DateFormat';
import { FormStore, IFormField, FormType } from 'common/FormStore';
import { Field } from 'common/Field';
import { isRequired } from "utils/Validate";
import * as _ from 'lodash';
/**
 * 
 * @export
 * @interface PermissionVo
 */
export interface PermissionVo {
    /**
     * 权限代码
     * @type {string}
     * @memberof PermissionVo
     */
    code?: string;
    /**
     * 层级
     * @type {number}
     * @memberof PermissionVo
     */
    level?: number;
    /**
     * 权限名称
     * @type {string}
     * @memberof PermissionVo
     */
    name?: string;
    /**
     * 是否拥有该权限
     * @type {boolean}
     * @memberof PermissionVo
     */
    owned?: boolean;
    /**
     * 上级权限代码
     * @type {string}
     * @memberof PermissionVo
     */
    parentCode?: string;
    /**
     * 当前权限属于哪个角色
     * @type {string}
     * @memberof PermissionVo
     */
    role?: string;
    /**
     * 是否拥有该权限
     * @type {boolean}
     * @memberof PermissionVo
     */
    selected?: boolean;
    /**
     * 同一级下展示顺序
     * @type {number}
     * @memberof PermissionVo
     */
    seq?: number;
    /**
     * 权限类型，1菜单，2URL,3请求
     * @type {number}
     * @memberof PermissionVo
     */
    type?: number;
}

export function PermissionVoFromJSON(json: any): PermissionVo {
    return {
        'code': !exists(json, 'code') ? undefined : json['code'],
        'level': !exists(json, 'level') ? undefined : json['level'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'owned': !exists(json, 'owned') ? undefined : json['owned'],
        'parentCode': !exists(json, 'parentCode') ? undefined : json['parentCode'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'selected': !exists(json, 'selected') ? undefined : json['selected'],
        'seq': !exists(json, 'seq') ? undefined : json['seq'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function PermissionVoToJSON(value?: PermissionVo): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'code': value.code,
        'level': value.level,
        'name': value.name,
        'owned': value.owned,
        'parentCode': value.parentCode,
        'role': value.role,
        'selected': value.selected,
        'seq': value.seq,
        'type': value.type,
    };
}



export type PermissionVoFormKeys = keyof PermissionVo;
export type PermissionVoNewType = {[P in PermissionVoFormKeys]: PermissionVo[P]};
export type PermissionVoFormType = FormType<PermissionVoNewType>;

export function PermissionVoFormDefault(): IFormField<PermissionVo> {
    return {
        code: { value: void 0 },
        level: { value: void 0 },
        name: { value: void 0 },
        owned: { value: void 0 },
        parentCode: { value: void 0 },
        role: { value: void 0 },
        selected: { value: void 0 },
        seq: { value: void 0 },
        type: { value: void 0 },
    } as any;
}

export function createPermissionVoFormStore<T>(field?: IFormField<T>): FormType<PermissionVoNewType & T> {
    const fields: IFormField<T & PermissionVo> = _.merge<any , any>(PermissionVoFormDefault(), field);
    return new FormStore(
        _.mapValues<IFormField<T & PermissionVo>, Field<any>>(fields, (item: any) => {

          if (_.has(item, "required") && item.required) {
            return new Field(item).validators(...(item.rules || [isRequired]));
          }
          if (typeof item!!.rules !== "undefined") {
            return new Field(item).validators(...item.rules);
          }
          return new Field(item);
        })
    );
}

