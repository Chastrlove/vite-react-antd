// tslint:disable
/**
 * 前端服务
 * 服务API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { momentInit as moment } from 'utils/DateFormat';
import { FormStore, IFormField, FormType } from 'common/FormStore';
import { Field } from 'common/Field';
import { isRequired } from "utils/Validate";
import * as _ from 'lodash';
/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 优势
     * @type {Array<string>}
     * @memberof RegisterDto
     */
    advantage?: Array<string>;
    /**
     * 资产偏好
     * @type {Array<string>}
     * @memberof RegisterDto
     */
    assetPreference?: Array<string>;
    /**
     * 业务区域
     * @type {Array<string>}
     * @memberof RegisterDto
     */
    businessArea?: Array<string>;
    /**
     * 所属公司
     * @type {string}
     * @memberof RegisterDto
     */
    corpName?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof RegisterDto
     */
    mobile?: string;
    /**
     * 业务模式
     * @type {Array<string>}
     * @memberof RegisterDto
     */
    mode?: Array<string>;
    /**
     * 短信验证码
     * @type {string}
     * @memberof RegisterDto
     */
    msgCode?: string;
    /**
     * 密码
     * @type {string}
     * @memberof RegisterDto
     */
    password?: string;
    /**
     * 名称
     * @type {string}
     * @memberof RegisterDto
     */
    realName?: string;
    /**
     * 推荐人
     * @type {string}
     * @memberof RegisterDto
     */
    referrer?: string;
    /**
     * 类型
     * @type {Array<string>}
     * @memberof RegisterDto
     */
    type?: Array<string>;
}

export function RegisterDtoFromJSON(json: any): RegisterDto {
    return {
        'advantage': !exists(json, 'advantage') ? undefined : json['advantage'],
        'assetPreference': !exists(json, 'assetPreference') ? undefined : json['assetPreference'],
        'businessArea': !exists(json, 'businessArea') ? undefined : json['businessArea'],
        'corpName': !exists(json, 'corpName') ? undefined : json['corpName'],
        'mobile': !exists(json, 'mobile') ? undefined : json['mobile'],
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
        'msgCode': !exists(json, 'msgCode') ? undefined : json['msgCode'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'realName': !exists(json, 'realName') ? undefined : json['realName'],
        'referrer': !exists(json, 'referrer') ? undefined : json['referrer'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function RegisterDtoToJSON(value?: RegisterDto): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'advantage': value.advantage,
        'assetPreference': value.assetPreference,
        'businessArea': value.businessArea,
        'corpName': value.corpName,
        'mobile': value.mobile,
        'mode': value.mode,
        'msgCode': value.msgCode,
        'password': value.password,
        'realName': value.realName,
        'referrer': value.referrer,
        'type': value.type,
    };
}



export type RegisterDtoFormKeys = keyof RegisterDto;
export type RegisterDtoNewType = {[P in RegisterDtoFormKeys]: RegisterDto[P]};
export type RegisterDtoFormType = FormType<RegisterDtoNewType>;

export function RegisterDtoFormDefault(): IFormField<RegisterDto> {
    return {
        advantage: { value: void 0 },
        assetPreference: { value: void 0 },
        businessArea: { value: void 0 },
        corpName: { value: void 0 },
        mobile: { value: void 0 },
        mode: { value: void 0 },
        msgCode: { value: void 0 },
        password: { value: void 0 },
        realName: { value: void 0 },
        referrer: { value: void 0 },
        type: { value: void 0 },
    } as any;
}

export function createRegisterDtoFormStore<T>(field?: IFormField<T>): FormType<RegisterDtoNewType & T> {
    const fields: IFormField<T & RegisterDto> = _.merge<any , any>(RegisterDtoFormDefault(), field);
    return new FormStore(
        _.mapValues<IFormField<T & RegisterDto>, Field<any>>(fields, (item: any) => {

          if (_.has(item, "required") && item.required) {
            return new Field(item).validators(...(item.rules || [isRequired]));
          }
          if (typeof item!!.rules !== "undefined") {
            return new Field(item).validators(...item.rules);
          }
          return new Field(item);
        })
    );
}

