// tslint:disable
/**
 * 前端服务
 * 服务API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { momentInit as moment } from 'utils/DateFormat';
import { FormStore, IFormField, FormType } from 'common/FormStore';
import { Field } from 'common/Field';
import { isRequired } from "utils/Validate";
import * as _ from 'lodash';
/**
 * 
 * @export
 * @interface VerifyCodeVo
 */
export interface VerifyCodeVo {
    /**
     * 验证码图片BASE64
     * @type {string}
     * @memberof VerifyCodeVo
     */
    code?: string;
    /**
     * 验证码UUID
     * @type {string}
     * @memberof VerifyCodeVo
     */
    uuid?: string;
}

export function VerifyCodeVoFromJSON(json: any): VerifyCodeVo {
    return {
        'code': !exists(json, 'code') ? undefined : json['code'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
    };
}

export function VerifyCodeVoToJSON(value?: VerifyCodeVo): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'code': value.code,
        'uuid': value.uuid,
    };
}



export type VerifyCodeVoFormKeys = keyof VerifyCodeVo;
export type VerifyCodeVoNewType = {[P in VerifyCodeVoFormKeys]: VerifyCodeVo[P]};
export type VerifyCodeVoFormType = FormType<VerifyCodeVoNewType>;

export function VerifyCodeVoFormDefault(): IFormField<VerifyCodeVo> {
    return {
        code: { value: void 0 },
        uuid: { value: void 0 },
    } as any;
}

export function createVerifyCodeVoFormStore<T>(field?: IFormField<T>): FormType<VerifyCodeVoNewType & T> {
    const fields: IFormField<T & VerifyCodeVo> = _.merge<any , any>(VerifyCodeVoFormDefault(), field);
    return new FormStore(
        _.mapValues<IFormField<T & VerifyCodeVo>, Field<any>>(fields, (item: any) => {

          if (_.has(item, "required") && item.required) {
            return new Field(item).validators(...(item.rules || [isRequired]));
          }
          if (typeof item!!.rules !== "undefined") {
            return new Field(item).validators(...item.rules);
          }
          return new Field(item);
        })
    );
}

