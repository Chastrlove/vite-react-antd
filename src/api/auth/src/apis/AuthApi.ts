// tslint:disable
/**
 * 前端服务
 * 服务API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import { setAuth } from "config/AuthOperation";
import { saveAs } from 'file-saver';
import { message } from 'antd';

import {
    LoginDto,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    PwdLoginDto,
    PwdLoginDtoFromJSON,
    PwdLoginDtoToJSON,
    RegisterDto,
    RegisterDtoFromJSON,
    RegisterDtoToJSON,
    RegisterExtDto,
    RegisterExtDtoFromJSON,
    RegisterExtDtoToJSON,
    UserDetailVo,
    UserDetailVoFromJSON,
    UserDetailVoToJSON,
    VerifyCodeVo,
    VerifyCodeVoFromJSON,
    VerifyCodeVoToJSON,
} from '../models';

declare interface BaseResponse<T = any> {
  status: number;
  success: boolean;
  result: T;
  totalPage?: number;
  totalCount?: number;
  pageSize?: number;
  currentPage: number;
  header: Headers;
}
declare interface RequestExtraOptions {
  alertMessage?: boolean;
  headers?: { [key: string]: any };
  [key: string]: any;
}

async function createResult<T=any>(response: runtime.ApiResponse<T>) {
  const { status, headers, request } = response.raw;
  const value = await response.value();

  if (headers.has('Authorization')) {
    setAuth(headers.get('Authorization'))
  }

  return {
    result: value,
    success: status >= 200 && status < 300,
    header: headers,
    status,
    totalPage: Number(headers.get("x-total-page")),
    totalCount: Number(headers.get("x-total-count")),
    pageSize: Number(headers.get("x-page-size")),
    currentPage: Number(headers.get("x-current-page")),
  };
};

export interface LoginAppByMobileUsingPOSTRequest {
    dto: LoginDto;
}

export interface LoginByMobileUsingPOSTRequest {
    dto: LoginDto;
}

export interface LoginByPwdUsingPOSTRequest {
    dto: PwdLoginDto;
}

export interface RegisterExtInfoUsingPOSTRequest {
    registerExtDto: RegisterExtDto;
}

export interface RegisterUsingPOSTRequest {
    registerVo: RegisterDto;
}

/**
 * no description
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * 用户详情
     */
    async getUserDetailUsingGETRaw(options:RequestExtraOptions={}): Promise<runtime.ApiResponse<UserDetailVo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
        // oauth required
          if (typeof this.configuration.accessToken === 'function') {
            headerParameters["Authorization"] = this.configuration.accessToken("", []);
          } else {
            headerParameters["Authorization"] = this.configuration.accessToken;
          }
        }

        const response = await this.request({
            path: `/user/detail`,
            method: 'GET',
            headers: { ...headerParameters, ...options.headers },
            query: queryParameters,
        },options.alertMessage);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailVoFromJSON(jsonValue));
    }

   /**
    * 用户详情
    */
    async getUserDetailUsingGET(options?:RequestExtraOptions): Promise<BaseResponse<UserDetailVo>> {
         try{
           const response = await this.getUserDetailUsingGETRaw(options);
           return createResult(response);
         } catch (e) {
           if(e instanceof runtime.RequiredError){
             message.error(e.message);
           }
           throw e;
         }
    }

    /**
     * 图形验证码
     */
    async getVerifyCodeUsingGETRaw(options:RequestExtraOptions={}): Promise<runtime.ApiResponse<VerifyCodeVo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
        // oauth required
          if (typeof this.configuration.accessToken === 'function') {
            headerParameters["Authorization"] = this.configuration.accessToken("", []);
          } else {
            headerParameters["Authorization"] = this.configuration.accessToken;
          }
        }

        const response = await this.request({
            path: `/verifyCode`,
            method: 'GET',
            headers: { ...headerParameters, ...options.headers },
            query: queryParameters,
        },options.alertMessage);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyCodeVoFromJSON(jsonValue));
    }

   /**
    * 图形验证码
    */
    async getVerifyCodeUsingGET(options?:RequestExtraOptions): Promise<BaseResponse<VerifyCodeVo>> {
         try{
           const response = await this.getVerifyCodeUsingGETRaw(options);
           return createResult(response);
         } catch (e) {
           if(e instanceof runtime.RequiredError){
             message.error(e.message);
           }
           throw e;
         }
    }

    /**
     * 短信登录
     */
    async loginAppByMobileUsingPOSTRaw(requestParameters: LoginAppByMobileUsingPOSTRequest,options:RequestExtraOptions={}): Promise<runtime.ApiResponse<UserDetailVo>> {
        if (requestParameters.dto === null || requestParameters.dto === undefined) {
            throw new runtime.RequiredError('dto','Required parameter requestParameters.dto was null or undefined when calling loginAppByMobileUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
        // oauth required
          if (typeof this.configuration.accessToken === 'function') {
            headerParameters["Authorization"] = this.configuration.accessToken("", []);
          } else {
            headerParameters["Authorization"] = this.configuration.accessToken;
          }
        }

        const response = await this.request({
            path: `/app/login/mobile`,
            method: 'POST',
            headers: { ...headerParameters, ...options.headers },
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters.dto),
        },options.alertMessage);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailVoFromJSON(jsonValue));
    }

   /**
    * 短信登录
    */
    async loginAppByMobileUsingPOST(requestParameters: LoginAppByMobileUsingPOSTRequest,options?:RequestExtraOptions): Promise<BaseResponse<UserDetailVo>> {
         try{
           const response = await this.loginAppByMobileUsingPOSTRaw(requestParameters,options);
           return createResult(response);
         } catch (e) {
           if(e instanceof runtime.RequiredError){
             message.error(e.message);
           }
           throw e;
         }
    }

    /**
     * 短信登录
     */
    async loginByMobileUsingPOSTRaw(requestParameters: LoginByMobileUsingPOSTRequest,options:RequestExtraOptions={}): Promise<runtime.ApiResponse<UserDetailVo>> {
        if (requestParameters.dto === null || requestParameters.dto === undefined) {
            throw new runtime.RequiredError('dto','Required parameter requestParameters.dto was null or undefined when calling loginByMobileUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
        // oauth required
          if (typeof this.configuration.accessToken === 'function') {
            headerParameters["Authorization"] = this.configuration.accessToken("", []);
          } else {
            headerParameters["Authorization"] = this.configuration.accessToken;
          }
        }

        const response = await this.request({
            path: `/login/mobile`,
            method: 'POST',
            headers: { ...headerParameters, ...options.headers },
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters.dto),
        },options.alertMessage);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailVoFromJSON(jsonValue));
    }

   /**
    * 短信登录
    */
    async loginByMobileUsingPOST(requestParameters: LoginByMobileUsingPOSTRequest,options?:RequestExtraOptions): Promise<BaseResponse<UserDetailVo>> {
         try{
           const response = await this.loginByMobileUsingPOSTRaw(requestParameters,options);
           return createResult(response);
         } catch (e) {
           if(e instanceof runtime.RequiredError){
             message.error(e.message);
           }
           throw e;
         }
    }

    /**
     * 密码登录
     */
    async loginByPwdUsingPOSTRaw(requestParameters: LoginByPwdUsingPOSTRequest,options:RequestExtraOptions={}): Promise<runtime.ApiResponse<UserDetailVo>> {
        if (requestParameters.dto === null || requestParameters.dto === undefined) {
            throw new runtime.RequiredError('dto','Required parameter requestParameters.dto was null or undefined when calling loginByPwdUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
        // oauth required
          if (typeof this.configuration.accessToken === 'function') {
            headerParameters["Authorization"] = this.configuration.accessToken("", []);
          } else {
            headerParameters["Authorization"] = this.configuration.accessToken;
          }
        }

        const response = await this.request({
            path: `/login/pwd`,
            method: 'POST',
            headers: { ...headerParameters, ...options.headers },
            query: queryParameters,
            body: PwdLoginDtoToJSON(requestParameters.dto),
        },options.alertMessage);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailVoFromJSON(jsonValue));
    }

   /**
    * 密码登录
    */
    async loginByPwdUsingPOST(requestParameters: LoginByPwdUsingPOSTRequest,options?:RequestExtraOptions): Promise<BaseResponse<UserDetailVo>> {
         try{
           const response = await this.loginByPwdUsingPOSTRaw(requestParameters,options);
           return createResult(response);
         } catch (e) {
           if(e instanceof runtime.RequiredError){
             message.error(e.message);
           }
           throw e;
         }
    }

    /**
     * 登出
     */
    async logoutUsingPOSTRaw(options:RequestExtraOptions={}): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
        // oauth required
          if (typeof this.configuration.accessToken === 'function') {
            headerParameters["Authorization"] = this.configuration.accessToken("", []);
          } else {
            headerParameters["Authorization"] = this.configuration.accessToken;
          }
        }

        const response = await this.request({
            path: `/logout`,
            method: 'POST',
            headers: { ...headerParameters, ...options.headers },
            query: queryParameters,
        },options.alertMessage);

        return new runtime.VoidApiResponse(response);
    }

   /**
    * 登出
    */
    async logoutUsingPOST(options?:RequestExtraOptions): Promise<BaseResponse<void>> {
        try{
          const response =await this.logoutUsingPOSTRaw(options);
          return createResult(response);
        } catch (e) {
          if(e instanceof runtime.RequiredError){
            message.error(e.message);
          }
          throw e;
        }
    }

    /**
     * registerExtInfo
     */
    async registerExtInfoUsingPOSTRaw(requestParameters: RegisterExtInfoUsingPOSTRequest,options:RequestExtraOptions={}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.registerExtDto === null || requestParameters.registerExtDto === undefined) {
            throw new runtime.RequiredError('registerExtDto','Required parameter requestParameters.registerExtDto was null or undefined when calling registerExtInfoUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
        // oauth required
          if (typeof this.configuration.accessToken === 'function') {
            headerParameters["Authorization"] = this.configuration.accessToken("", []);
          } else {
            headerParameters["Authorization"] = this.configuration.accessToken;
          }
        }

        const response = await this.request({
            path: `/register/ext`,
            method: 'POST',
            headers: { ...headerParameters, ...options.headers },
            query: queryParameters,
            body: RegisterExtDtoToJSON(requestParameters.registerExtDto),
        },options.alertMessage);

        return new runtime.VoidApiResponse(response);
    }

   /**
    * registerExtInfo
    */
    async registerExtInfoUsingPOST(requestParameters: RegisterExtInfoUsingPOSTRequest,options?:RequestExtraOptions): Promise<BaseResponse<void>> {
        try{
          const response =await this.registerExtInfoUsingPOSTRaw(requestParameters,options);
          return createResult(response);
        } catch (e) {
          if(e instanceof runtime.RequiredError){
            message.error(e.message);
          }
          throw e;
        }
    }

    /**
     * register
     */
    async registerUsingPOSTRaw(requestParameters: RegisterUsingPOSTRequest,options:RequestExtraOptions={}): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.registerVo === null || requestParameters.registerVo === undefined) {
            throw new runtime.RequiredError('registerVo','Required parameter requestParameters.registerVo was null or undefined when calling registerUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
        // oauth required
          if (typeof this.configuration.accessToken === 'function') {
            headerParameters["Authorization"] = this.configuration.accessToken("", []);
          } else {
            headerParameters["Authorization"] = this.configuration.accessToken;
          }
        }

        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: { ...headerParameters, ...options.headers },
            query: queryParameters,
            body: RegisterDtoToJSON(requestParameters.registerVo),
        },options.alertMessage);

        return new runtime.TextApiResponse(response) as any;
    }

   /**
    * register
    */
    async registerUsingPOST(requestParameters: RegisterUsingPOSTRequest,options?:RequestExtraOptions): Promise<BaseResponse<number>> {
         try{
           const response = await this.registerUsingPOSTRaw(requestParameters,options);
           return createResult(response);
         } catch (e) {
           if(e instanceof runtime.RequiredError){
             message.error(e.message);
           }
           throw e;
         }
    }

}

